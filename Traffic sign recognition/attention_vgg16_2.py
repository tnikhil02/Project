# -*- coding: utf-8 -*-
"""ATTENTION-VGG16-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HnQ-Is0kU-2cOrUKT_c_b2kCXlE-y9OQ
"""

from google.colab import drive
drive.mount('/content/gdrive')

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import pathlib
import glob
import os
import pandas as pd
from tensorflow.keras.applications import VGG16
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense , Flatten , Dropout , Conv2D , MaxPooling2D,Layer
from tensorflow.keras.models import Model , Sequential

!unzip /content/gdrive/MyDrive/project-M/project-2/archive.zip

path = '/content/labels.csv'
df = pd.read_csv(path)
dataset = '/content/traffic_Data/DATA'
df



data = []
entry = []
for filename in os.listdir(dataset):
  entry.append(df['Name'][int(filename)])
  entry.append(int(filename))
  data.append(entry[:2])
  entry.clear()

#making a dataframe so it's easier to display using seaborn
display_data = pd.DataFrame(data,columns=['Name' , 'num_images'])
#display_data
plt.figure(figsize=(15,25))
ax = sns.barplot(x='num_images',y='Name' , data=display_data)

train_datagen = ImageDataGenerator(

                    rescale=1./255 , #rescale
                    rotation_range=40,           #data augmentation
                    width_shift_range=0.2,
                    height_shift_range=0.2,
                    shear_range=0.2,
                    horizontal_flip=True     ,
                    validation_split=0.2)

train_generator=train_datagen.flow_from_directory(
                       "/content/traffic_Data/DATA",
                       subset="training",
                        batch_size=32,
                        class_mode='categorical',
                        target_size=(224,224)      )

val_datagen = ImageDataGenerator(rescale=1./255,
                          validation_split=0.2
 )
val_generator=train_datagen.flow_from_directory(
                       "/content/traffic_Data/DATA",
                        batch_size=32,
                       subset="validation",
                        class_mode='categorical',
                        target_size=(224,224)      )

# Define Spatial Attention Module
class SpatialAttention(Layer):
    def __init__(self, kernel_size=7):
        super(SpatialAttention, self).__init__()
        self.conv = Conv2D(1, kernel_size, padding='same', activation='sigmoid')

    def call(self, inputs):
        avg_out = tf.reduce_mean(inputs, axis=3, keepdims=True)
        max_out = tf.reduce_max(inputs, axis=3, keepdims=True)
        concat = tf.concat([avg_out, max_out], axis=3)
        return inputs * self.conv(concat)

vgg16_obj = VGG16(include_top = False, input_shape = (224,224,3),weights='imagenet')
for layer in vgg16_obj.layers:
    layer.trainable = False
vgg16_obj.summary()
def add_spatial_attention(x):
    x = SpatialAttention()(x)
    return x

# Modify VGG16 architecture
from tensorflow.keras.layers import Input
inputs = Input(shape=(224, 224, 3))
x = vgg16_obj(inputs)
x = add_spatial_attention(x)  # Add SAM after VGG16 layers
x = Flatten()(x)
x = Dense(1024, activation='relu')(x)
final_layer = Dense(len(df), activation='softmax')(x)
final_layer

model = Model(inputs=inputs, outputs=final_layer)
model.summary()

model.compile(loss='categorical_crossentropy', metrics=['accuracy'])

history=model.fit_generator(train_generator, epochs=20,validation_data=val_generator)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'],color='red',label='accuracy')
plt.plot(history.history['val_accuracy'],color='blue',label='loss')

plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')

model.save('model')

label = {0:"Speed Limit 5", 1:"Speed Limit 15", 2:"Speed Limit 30",
         3:"Speed Limit 40", 4:"Speed Limit 50", 5:"Speed Limit 60",
         6:"Speed Limit 70", 7:"Speed Limit 80", 8:"Don't go straight or left",
         9:"Don't go straight or right", 10:"Don't go straight", 11:"No Left",
         12:"Don't go right or left", 13:"Don't go right", 14:"No Overtake from Left",
         15:"No U-turn", 16:"No Cars", 17:"No Horn", 18:"Speed Limit (40km/h)",
         19:"Speed Limit (50km/h)", 20:"Go straight or right", 21:"Watch out for cars",
         22:"Go left", 23:"Go left or right", 24:"Go right", 25:"Keep Left",
         26:"Keep Right", 27:"Roundabout mandatory", 28:"Go Straight",
         29:"Horn", 30:"Bicycle Crossing", 31:"U-turn", 32:"Road Divider",
         33:"Traffic Signals", 34:"Danger ahead", 35:"Zebra Crossing",
         36:"Bicycle Crossing", 37:"Children Crossing", 38:"Dangerous curve to the left",
         39:"Dangerous curve to the right", 40:"Unknown 1", 41:"Unknown 2", 42:"Unknown 3",
         43:"Go right or straight", 44:"Go left or straight", 45:"Unknown 4",
         46:"Zigzag curve", 47:"Train Crossing", 48:"Under construction", 49:"Unknown 5",
         50:"Fences", 51:"Heavy Vehicle Accidents", 52:"Unknown 6", 53:"Give way",
         54:"No Stopping", 55:"No Entry", 56:"Yield", 57:"Unknown 8"}

model = tf.keras.models.load_model('/content/model')

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
from tensorflow.keras.preprocessing import image # Import the image preprocessing module

img_directory = "/content/traffic_Data/TEST/000_0007_j.png"
test_image = image.load_img(img_directory, target_size=(224,224))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis=0)
test_image

result = model.predict(test_image)

img = mpimg.imread(img_directory)
imgplot = plt.imshow(img)
plt.show()

print(f"Predicted class: {label[np.argmax(result)]}")







